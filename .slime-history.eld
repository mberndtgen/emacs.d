;; -*- coding: utf-8-unix -*-
;; History for SLIME REPL. Automatically written.
;; Edit only if you know what you're doing
("(two-elem-nested-list 'a 'b 'c 'd)" "(unary-zerop (5 . x))" "(unary-add1 1)" "(unary-zerop 0)" "(unary-zerop 5)" "(MAKELIST '(1 2 3) '(a b c))" "(make)" "(+ 1 1)" "(mapcar #'list '(1 2 3))" "(listify '(1 2 3))" "(step  (listify '(1 2 3)))" "(two_map_add_list_using_mapcar '(1 2 3 4) '(4 3 2 1))" "(two_map_add_list_using_mapcar '(1 2 3 4) (4 3 2 1))" "(step  (mapc #'(lambda (x &rest x) (print x))
                      '(1 2 3 4)
                      '(a b c d e)
                      '(x y z)))" "(step  (mapc #'(lambda (&rest x) (print x))
                      '(1 2 3 4)
                      '(a b c d e)
                      '(x y z)))" "(setq dummy nil)" "dummy" "(step  (mapc #'(lambda (&rest x) (setq dummy (append dummy x)))
                      '(1 2 3 4)
                      '(a b c d e)
                      '(x y z)))" "(trace  (mapc #'(lambda (&rest x) (setq dummy (append dummy x)))
                      '(1 2 3 4)
                      '(a b c d e)
                      '(x y z)))" "(mapc #'(lambda (&rest x) (setq dummy (append dummy x)))
        '(1 2 3 4)
        '(a b c d e)
        '(x y z))" "(mapc 'car '((a b) (c d) (e f)))" "(mapcar 'car '((a b) (c d) (e f)))" "(two_map_add_list '(1 2 3 4) '(1 1 1))" "(two_map_add_list '(1 2 3 4) '(1 1 1 1))" "(two_map_add_list '(1 2 3 4) '(4 3 2 1))" "(step  (two_map_add_list '(1 2 3 4) '(4 3 2 1)))" "(my_allnumbersp '(1 1 a 1 2))" "(my_allnumbersp '(1 1 1 1 2))" "(my_find 'x '(a x y))" "(my_find 'x '(a (x) y))" "(car '((x) y))" "(rest '((x) y))" "(step (my_find 'x '(a (x) y))))" "(step my_find 'x '(a (x) y))" "(step my_find x '(a x y))" "(step result x '(a x y))" "(my_find x '(a x y))" "(my_length '(a b c d))" "(my_last '(a b c d e))" "(zeroit 10)" "(let ((result nil))
  (dolist (el '(a b c d e) result)
    (setf result (cons el result))))" "(let ((x nil)) (dotimes (n 5 x) (setf x (cons n x))))" "(dotimes (n 5) (print n))" "(dotimes n 5 (print n))" "(dotimes n 5)" "(let ((x 'first) (y 'second)) (two_list y x))" "(let ((x 'one) (y 'two)) )" "(let ((x 'one)))" "(let ((x 'one )))" "(baz 'oaktree)" "x" "(tryit 'cat)" "(setf x 'frisbee)" "(TRYIT 'cat)")